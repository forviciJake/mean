angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(e,o){t.currentUser=o})}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(o,n){console.log(o),console.log(n),e.login(o,n).then(function(e){t.$emit("login",e.data),console.log(user)})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&e.create({username:"dickeyxxx",body:t.postBody}).success(function(e){t.posts.unshift(e),t.postBody=null})},e.fetch().success(function(e){t.posts=e})}]),angular.module("app").service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("/api/posts")},this.create=function(e){return t.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc",function(t,e){t.register=function(t,o){e.createUser(t,o),console.log("newuser")}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{templateUrl:"posts.html",controller:"PostsCtrl"}).when("/register",{templateUrl:"register.html",controller:"RegisterCtrl"}).when("/login",{templateUrl:"login.html",controller:"LoginCtrl"})}]),angular.module("app").service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(o,n){return t.post("/api/sessions",{username:o,password:n}).then(function(o){return e.token=o.data,t.defaults.headers.common["X-Auth"]=o.data,e.getUser()})},e.createUser=function(e,o){return t.post("/api/users",{username:e,password:o})}}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsImFwcGxpY2F0aW9uLmN0cmwuanMiLCJsb2dpbi5jdHJsLmpzIiwicG9zdHMuY3RybC5qcyIsInBvc3RzLnN2Yy5qcyIsInJlZ2lzdGVyLmN0cmwuanMiLCJyb3V0ZS5qcyIsInVzZXIuc3ZjLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJG9uIiwiXyIsInVzZXIiLCJjdXJyZW50VXNlciIsIlVzZXJTdmMiLCJsb2dpbiIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJjb25zb2xlIiwibG9nIiwidGhlbiIsInJlc3BvbnNlIiwiJGVtaXQiLCJkYXRhIiwiUG9zdHNTdmMiLCJhZGRQb3N0IiwicG9zdEJvZHkiLCJjcmVhdGUiLCJib2R5Iiwic3VjY2VzcyIsInBvc3QiLCJwb3N0cyIsInVuc2hpZnQiLCJmZXRjaCIsInNlcnZpY2UiLCIkaHR0cCIsInRoaXMiLCJnZXQiLCJyZWdpc3RlciIsImNyZWF0ZVVzZXIiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInN2YyIsImdldFVzZXIiLCJ2YWwiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQUFDLE9BQUEsT0FFQSxZQ0ZBRCxRQUFBQyxPQUFBLE9BQUFDLFdBQUEsbUJBQUEsU0FBQSxTQUFBQyxHQUNBQSxFQUFBQyxJQUFBLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUgsRUFBQUksWUFBQUQsT0NGQU4sUUFBQUMsT0FBQSxPQUFBQyxXQUFBLGFBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFLLEdBRUFMLEVBQUFNLE1BQUEsU0FBQUMsRUFBQUMsR0FDQUMsUUFBQUMsSUFBQUgsR0FDQUUsUUFBQUMsSUFBQUYsR0FFQUgsRUFBQUMsTUFBQUMsRUFBQUMsR0FDQUcsS0FBQSxTQUFBQyxHQUNBWixFQUFBYSxNQUFBLFFBQUFELEVBQUFFLE1BQ0FMLFFBQUFDLElBQUFQLFlDVEFOLFFBQUFDLE9BQUEsT0FFQUMsV0FBQSxhQUFBLFNBQUEsV0FBQSxTQUFBQyxFQUFBZSxHQUVBZixFQUFBZ0IsUUFBQSxXQUNBaEIsRUFBQWlCLFVBQ0FGLEVBQUFHLFFBQ0FYLFNBQUEsWUFDQVksS0FBQW5CLEVBQUFpQixXQUNBRyxRQUFBLFNBQUFDLEdBQ0FyQixFQUFBc0IsTUFBQUMsUUFBQUYsR0FDQXJCLEVBQUFpQixTQUFBLFFBS0FGLEVBQUFTLFFBQUFKLFFBQUEsU0FBQUUsR0FDQXRCLEVBQUFzQixNQUFBQSxPQ2pCQXpCLFFBQUFDLE9BQUEsT0FFQTJCLFFBQUEsWUFBQSxRQUFBLFNBQUFDLEdBQ0FDLEtBQUFILE1BQUEsV0FDQSxNQUFBRSxHQUFBRSxJQUFBLGVBRUFELEtBQUFULE9BQUEsU0FBQUcsR0FDQSxNQUFBSyxHQUFBTCxLQUFBLGFBQUFBLE9DUEF4QixRQUFBQyxPQUFBLE9BQUFDLFdBQUEsZ0JBQUEsU0FBQSxVQUFBLFNBQUFDLEVBQUFLLEdBR0FMLEVBQUE2QixTQUFBLFNBQUF0QixFQUFBQyxHQUNBSCxFQUFBeUIsV0FBQXZCLEVBQUFDLEdBQ0FDLFFBQUFDLElBQUEsZUNMQWIsUUFBQUMsT0FBQSxPQUNBaUMsUUFBQSxpQkFBQSxTQUFBQyxHQUNBQSxFQUVBQyxLQUFBLEtBQUFDLFlBQUEsYUFBQW5DLFdBQUEsY0FFQWtDLEtBQUEsYUFBQUMsWUFBQSxnQkFBQW5DLFdBQUEsaUJBRUFrQyxLQUFBLFVBQUFDLFlBQUEsYUFBQW5DLFdBQUEsaUJDUkFGLFFBQUFDLE9BQUEsT0FBQTJCLFFBQUEsV0FBQSxRQUFBLFNBQUFDLEdBRUEsR0FBQVMsR0FBQVIsSUFFQVEsR0FBQUMsUUFBQSxXQUNBLE1BQUFWLEdBQUFFLElBQUEsZUFHQU8sRUFBQTdCLE1BQUEsU0FBQUMsRUFBQUMsR0FDQSxNQUFBa0IsR0FBQUwsS0FBQSxpQkFDQWQsU0FBQUEsRUFBQUMsU0FBQUEsSUFDQUcsS0FBQSxTQUFBMEIsR0FHQSxNQUZBRixHQUFBRyxNQUFBRCxFQUFBdkIsS0FDQVksRUFBQWEsU0FBQUMsUUFBQUMsT0FBQSxVQUFBSixFQUFBdkIsS0FDQXFCLEVBQUFDLGFBSUFELEVBQUFMLFdBQUEsU0FBQXZCLEVBQUFDLEdBQ0EsTUFBQWtCLEdBQUFMLEtBQUEsY0FDQWQsU0FBQUEsRUFBQUMsU0FBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcclxuXHJcblx0J25nUm91dGUnXHJcblxyXG5dKSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5jb250cm9sbGVyKCdBcHBsaWNhdGlvbkN0cmwnLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSl7XHJcblx0JHNjb3BlLiRvbignbG9naW4nLCBmdW5jdGlvbihfLCB1c2VyKXtcclxuXHRcdCRzY29wZS5jdXJyZW50VXNlciA9IHVzZXJcclxuXHR9KTtcclxuXHJcblxyXG5cdFxyXG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpLmNvbnRyb2xsZXIoJ0xvZ2luQ3RybCcsIFsnJHNjb3BlJywgJ1VzZXJTdmMnLCBmdW5jdGlvbigkc2NvcGUsIFVzZXJTdmMpe1xyXG5cclxuXHQkc2NvcGUubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xyXG5cdFx0Y29uc29sZS5sb2codXNlcm5hbWUpXHJcblx0XHRjb25zb2xlLmxvZyhwYXNzd29yZClcclxuXHRcdFxyXG5cdFx0VXNlclN2Yy5sb2dpbih1c2VybmFtZSwgcGFzc3dvcmQpXHJcblx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcblx0XHRcdCRzY29wZS4kZW1pdCgnbG9naW4nLCByZXNwb25zZS5kYXRhKVxyXG5cdFx0XHRjb25zb2xlLmxvZyh1c2VyKVxyXG5cdFx0fSlcclxuXHR9O1xyXG5cclxufV0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG5cclxuICAgIC5jb250cm9sbGVyKCdQb3N0c0N0cmwnLCBmdW5jdGlvbigkc2NvcGUsIFBvc3RzU3ZjKXtcclxuXHJcbiAgICAgICAgJHNjb3BlLmFkZFBvc3QgPSBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICBpZigkc2NvcGUucG9zdEJvZHkpe1xyXG4gICAgICAgICAgICAgICAgUG9zdHNTdmMuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB1c2VybmFtZTogJ2RpY2tleXh4eCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keTogJHNjb3BlLnBvc3RCb2R5XHJcbiAgICAgICAgICAgICAgICB9KS5zdWNjZXNzKGZ1bmN0aW9uKHBvc3Qpe1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0cy51bnNoaWZ0KHBvc3QpXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RCb2R5ID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIFBvc3RzU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihwb3N0cyl7XHJcbiAgICAgICAgICAgICRzY29wZS5wb3N0cyA9IHBvc3RzXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuXHJcbiAgICAuc2VydmljZSgnUG9zdHNTdmMnLCBmdW5jdGlvbigkaHR0cCl7XHJcbiAgICAgICAgdGhpcy5mZXRjaCA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQoJy9hcGkvcG9zdHMnKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvc3Qpe1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9wb3N0cycsIHBvc3QpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJykuY29udHJvbGxlcignUmVnaXN0ZXJDdHJsJywgWyckc2NvcGUnLCAnVXNlclN2YycsIGZ1bmN0aW9uKCRzY29wZSwgVXNlclN2Yyl7XHJcblx0XHJcblxyXG5cdCRzY29wZS5yZWdpc3RlciA9IGZ1bmN0aW9uKHVzZXJuYW1lLCBwYXNzd29yZCl7XHJcblx0XHRVc2VyU3ZjLmNyZWF0ZVVzZXIodXNlcm5hbWUsIHBhc3N3b3JkKVxyXG5cdFx0Y29uc29sZS5sb2coJ25ld3VzZXInKTtcclxuXHR9O1xyXG5cclxufV0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4uY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKXtcclxuXHQkcm91dGVQcm92aWRlclxyXG5cclxuXHQud2hlbignLycsIHt0ZW1wbGF0ZVVybDogJ3Bvc3RzLmh0bWwnLCBjb250cm9sbGVyOiAnUG9zdHNDdHJsJ30pXHJcblx0XHJcblx0LndoZW4oJy9yZWdpc3RlcicsIHt0ZW1wbGF0ZVVybDogJ3JlZ2lzdGVyLmh0bWwnLCBjb250cm9sbGVyOiAnUmVnaXN0ZXJDdHJsJ30pXHJcblx0XHJcblx0LndoZW4oJy9sb2dpbicsIHt0ZW1wbGF0ZVVybDogJ2xvZ2luLmh0bWwnLCBjb250cm9sbGVyOiAnTG9naW5DdHJsJ30pXHJcblxyXG59KSIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKS5zZXJ2aWNlKCdVc2VyU3ZjJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKXtcclxuXHRcclxuXHR2YXIgc3ZjID0gdGhpcztcclxuXHJcblx0c3ZjLmdldFVzZXIgPSBmdW5jdGlvbigpe1xyXG5cdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS91c2VycycpXHJcblx0fVxyXG5cclxuXHRzdmMubG9naW4gPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xyXG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvc2Vzc2lvbnMnLCB7XHJcblx0XHRcdHVzZXJuYW1lOiB1c2VybmFtZSwgcGFzc3dvcmQ6IHBhc3N3b3JkXHJcblx0XHR9KS50aGVuKGZ1bmN0aW9uKHZhbCl7XHJcblx0XHRcdHN2Yy50b2tlbiA9IHZhbC5kYXRhXHJcblx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUF1dGgnXSA9IHZhbC5kYXRhXHJcblx0XHRcdHJldHVybiBzdmMuZ2V0VXNlcigpXHJcblx0XHR9KVxyXG5cdH1cclxuXHJcblx0c3ZjLmNyZWF0ZVVzZXIgPSBmdW5jdGlvbih1c2VybmFtZSwgcGFzc3dvcmQpe1xyXG5cdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB7IFxyXG5cdFx0XHR1c2VybmFtZTogdXNlcm5hbWUsIHBhc3N3b3JkOiBwYXNzd29yZFxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG59XSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
